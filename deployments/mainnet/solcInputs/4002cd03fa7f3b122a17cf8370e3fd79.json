{
  "language": "Solidity",
  "sources": {
    "contracts/zaps/BondHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IBondDepoV2.sol\";\n\ncontract BondHelper {\n    ////////////////////////// STORAGE //////////////////////////\n\n    /// @notice used for access control\n    address public olympusDAO;\n\n    /// @notice needed since we can't access IDS length in v2 bond depo\n    mapping(address => uint16) public principalToBID;\n\n    /// @notice stores all principals for ohm depo\n    address[] public principals;\n\n    /// @notice V2 olympus bond depository\n    IBondDepoV2 public depov2;\n\n    ////////////////////////// MODIFIERS //////////////////////////\n\n    modifier onlyOlympusDAO() {\n        require(msg.sender == olympusDAO, \"Only OlympusDAO\");\n        _;\n    }\n\n    ////////////////////////// CONSTRUCTOR //////////////////////////\n\n    constructor(address[] memory _principals, IBondDepoV2 _depov2) {\n        principals = _principals;\n        depov2 = _depov2;\n        // access control set to deployer temporarily\n        // so that we can setup state.\n        olympusDAO = msg.sender;\n    }\n\n    ////////////////////////// PUBLIC VIEW //////////////////////////\n\n    /// @notice returns (cheap bond ID, principal)\n    function getCheapestBID() external view returns (uint16, address) {\n        // set cheapest price to a very large number so we can check against it\n        uint256 cheapestPrice = type(uint256).max;\n        uint16 cheapestBID;\n        address cheapestPrincipal;\n\n        for (uint256 i; i < principals.length; i++) {\n            uint16 BID = principalToBID[principals[i]];\n            uint256 price = IBondDepoV2(depov2).bondPriceInUSD(BID);\n\n            if (price <= cheapestPrice && _isBondable(BID)) {\n                cheapestPrice = price;\n                cheapestBID = BID;\n                cheapestPrincipal = principals[i];\n            }\n        }\n\n        return (cheapestBID, cheapestPrincipal);\n    }\n\n    function getBID(address principal) external view returns (uint16) {\n        uint16 BID = principalToBID[principal];\n        if (_isBondable(BID)) return BID;\n\n        revert(\"Unsupported principal\");\n    }\n\n    function _isBondable(uint16 _BID) public view returns (bool) {\n        (, , uint256 totalDebt_, ) = depov2.bondInfo(_BID);\n        (, , , , uint256 maxDebt_) = depov2.bondTerms(_BID);\n\n        bool soldOut = totalDebt_ == maxDebt_;\n\n        return !soldOut;\n    }\n\n    ////////////////////////// ONLY OLYMPUS //////////////////////////\n\n    function update_OlympusDAO(address _newOlympusDAO) external onlyOlympusDAO {\n        olympusDAO = _newOlympusDAO;\n    }\n\n    function update_principalToBondId(address _principal, uint16 _bondId) external onlyOlympusDAO {\n        principalToBID[_principal] = _bondId;\n    }\n\n    function update_principals(address[] memory _principals) external onlyOlympusDAO {\n        principals = _principals;\n    }\n}\n"
    },
    "contracts/zaps/interfaces/IBondDepoV2.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity ^0.8.0;\n\ninterface IBondDepoV2 {\n    /**\n     * @notice deposit bond\n     * @param _bid uint256\n     * @param _amount uint256\n     * @param _maxPrice uint256\n     * @param _depositor address\n     * @param _feo address\n     * @return payout_ uint256\n     * @return expiry_ uint256\n     * @return index_ uint256\n     */\n    function deposit(\n        uint256 _bid,\n        uint256 _amount,\n        uint256 _maxPrice,\n        address _depositor,\n        address _feo\n    )\n        external\n        returns (\n            uint256 payout_,\n            uint256 expiry_,\n            uint16 index_\n        );\n\n    function marketPrice(uint256 _id) external view returns (uint256);\n\n    function bondPriceInUSD(uint16 _bid) external view returns (uint256);\n\n    /**\n     * @notice returns data about a bond type\n     * @param _BID uint\n     * @return principal_ address\n     * @return calculator_ address\n     * @return totalDebt_ uint\n     * @return lastBondCreatedAt_ uint\n     */\n    function bondInfo(uint256 _BID)\n        external\n        view\n        returns (\n            address principal_,\n            address calculator_,\n            uint256 totalDebt_,\n            uint256 lastBondCreatedAt_\n        );\n\n    /**\n     * @notice returns terms for a bond type\n     * @param _BID uint\n     * @return controlVariable_ uint\n     * @return vestingTerm_ uint\n     * @return minimumPrice_ uint\n     * @return maxPayout_ uint\n     * @return maxDebt_ uint\n     */\n    function bondTerms(uint256 _BID)\n        external\n        view\n        returns (\n            uint256 controlVariable_,\n            uint256 vestingTerm_,\n            uint256 minimumPrice_,\n            uint256 maxPayout_,\n            uint256 maxDebt_\n        );\n\n    function indexesFor(address _user) external view returns (uint256[] memory);\n\n    function liveMarkets() external view returns (uint256[] memory);\n}\n"
    },
    "contracts/zaps/OlympusZapV2.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\n/// @title Olympus V2 Zap In\n/// @author Zapper, Cryptonomik, Dionysus\n/// Review by: ZayenX\n/// Copyright (C) 2021 Zapper\n/// Copyright (C) 2022 OlympusDAO\n\npragma solidity 0.8.4;\n\nimport \"./interfaces/IBondDepoV2.sol\";\nimport \"./interfaces/IStakingV2.sol\";\nimport \"./interfaces/IsOHMv2.sol\";\nimport \"./interfaces/IgOHM.sol\";\nimport \"./libraries/ZapBaseV3.sol\";\n\ncontract Olympus_V2_Zap_In is ZapBaseV3 {\n    using SafeERC20 for IERC20;\n\n    ////////////////////////// STORAGE //////////////////////////\n\n    address public depo;\n\n    address public staking;\n\n    address public immutable OHM;\n\n    address public immutable sOHM;\n\n    address public immutable gOHM;\n\n    ////////////////////////// EVENTS //////////////////////////\n\n    // Emitted when `sender` successfully calls ZapStake\n    event zapStake(address sender, address token, uint256 tokensRec, address referral);\n\n    // Emitted when `sender` successfully calls ZapBond\n    event zapBond(address sender, address token, uint256 tokensRec, address referral);\n\n    ////////////////////////// CONSTRUCTION //////////////////////////\n    constructor(\n        address _depo,\n        address _staking,\n        address _OHM,\n        address _sOHM,\n        address _gOHM\n    ) ZapBaseV3(0, 0) {\n        // 0x Proxy\n        approvedTargets[0xDef1C0ded9bec7F1a1670819833240f027b25EfF] = true;\n        depo = _depo;\n        staking = _staking;\n        OHM = _OHM;\n        sOHM = _sOHM;\n        gOHM = _gOHM;\n    }\n\n    ////////////////////////// PUBLIC //////////////////////////\n\n    /// @notice This function acquires OHM with ETH or ERC20 tokens and stakes it for sOHM/gOHM\n    /// @param fromToken The token used for entry (address(0) if ether)\n    /// @param amountIn The quantity of fromToken being sent\n    /// @param toToken The token fromToken is being converted to (i.e. sOHM or gOHM)\n    /// @param minToToken The minimum acceptable quantity sOHM or gOHM to receive. Reverts otherwise\n    /// @param swapTarget Excecution target for the swap\n    /// @param swapData DEX swap data\n    /// @param referral The front end operator address\n    /// @return OHMRec The quantity of sOHM or gOHM received (depending on toToken)\n    function ZapStake(\n        address fromToken,\n        uint256 amountIn,\n        address toToken,\n        uint256 minToToken,\n        address swapTarget,\n        bytes calldata swapData,\n        address referral\n    ) external payable pausable returns (uint256 OHMRec) {\n        // pull users fromToken\n        uint256 toInvest = _pullTokens(fromToken, amountIn, referral, true);\n\n        // swap fromToken -> OHM\n        uint256 tokensBought = _fillQuote(fromToken, OHM, toInvest, swapTarget, swapData);\n\n        // stake OHM for sOHM or gOHM\n        OHMRec = _stake(tokensBought, toToken);\n\n        // Slippage check\n        require(OHMRec > minToToken, \"High Slippage\");\n\n        emit zapStake(msg.sender, toToken, OHMRec, referral);\n    }\n\n    /// @notice This function acquires Olympus bonds with ETH or ERC20 tokens\n    /// @param fromToken The token used for entry (address(0) if ether)\n    /// @param amountIn The quantity of fromToken being sent\n    /// @param principal The token fromToken is being converted to (i.e. token or LP to bond)\n    /// @param swapTarget Excecution target for the swap or Zap\n    /// @param swapData DEX or Zap data\n    /// @param referral The front end operator address\n    /// @param maxPrice The maximum price at which to buy the bond\n    /// @param bondId The ID of the market\n    /// @return OHMRec The quantity of gOHM due\n    function ZapBond(\n        address fromToken,\n        uint256 amountIn,\n        address principal,\n        address swapTarget,\n        bytes calldata swapData,\n        address referral,\n        uint256 maxPrice,\n        uint256 bondId\n    ) external payable pausable returns (uint256 OHMRec) {\n        // pull users fromToken\n        uint256 toInvest = _pullTokens(fromToken, amountIn, referral, true);\n\n        // swap fromToken -> bond principal\n        uint256 tokensBought = _fillQuote(\n            fromToken,\n            principal, // to token\n            toInvest,\n            swapTarget,\n            swapData\n        );\n\n        // make sure bond depo is approved to spend this contracts \"principal\"\n        _approveToken(principal, depo, tokensBought);\n\n        // purchase bond\n        (OHMRec, , ) = IBondDepoV2(depo).deposit(\n            bondId,\n            tokensBought,\n            maxPrice,\n            msg.sender, // depositor\n            referral\n        );\n\n        emit zapBond(msg.sender, principal, OHMRec, referral);\n    }\n\n    ////////////////////////// INTERNAL //////////////////////////\n\n    /// @param amount The quantity of OHM being staked\n    /// @param toToken Either sOHM or gOHM\n    /// @return OHMRec quantity of sOHM or gOHM  received (depending on toToken)\n    function _stake(uint256 amount, address toToken) internal returns (uint256) {\n        uint256 claimedTokens;\n        // approve staking for OHM if needed\n        _approveToken(OHM, staking, amount);\n\n        if (toToken == gOHM) {\n            // stake OHM -> gOHM\n            claimedTokens = IStaking(staking).stake(address(this), amount, false, true);\n\n            IERC20(toToken).safeTransfer(msg.sender, claimedTokens);\n\n            return claimedTokens;\n        }\n        // stake OHM -> sOHM\n        claimedTokens = IStaking(staking).stake(address(this), amount, true, true);\n\n        IERC20(toToken).safeTransfer(msg.sender, claimedTokens);\n\n        return claimedTokens;\n    }\n\n    ////////////////////////// OLYMPUS ONLY //////////////////////////\n    /// @notice update state for staking\n    function update_Staking(address _staking) external onlyOwner {\n        staking = _staking;\n    }\n\n    /// @notice update state for depo\n    function update_Depo(address _depo) external onlyOwner {\n        depo = _depo;\n    }\n}\n"
    },
    "contracts/zaps/interfaces/IStakingV2.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\ninterface IStaking {\n    function stake(\n        address _to,\n        uint256 _amount,\n        bool _rebasing,\n        bool _claim\n    ) external returns (uint256);\n\n    function claim(address _recipient, bool _rebasing) external returns (uint256);\n\n    function forfeit() external returns (uint256);\n\n    function toggleLock() external;\n\n    function unstake(\n        address _to,\n        uint256 _amount,\n        bool _trigger,\n        bool _rebasing\n    ) external returns (uint256);\n\n    function wrap(address _to, uint256 _amount) external returns (uint256 gBalance_);\n\n    function unwrap(address _to, uint256 _amount) external returns (uint256 sBalance_);\n\n    function rebase() external;\n\n    function index() external view returns (uint256);\n\n    function contractBalance() external view returns (uint256);\n\n    function totalStaked() external view returns (uint256);\n\n    function supplyInWarmup() external view returns (uint256);\n}\n"
    },
    "contracts/zaps/interfaces/IsOHMv2.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\ninterface IsOHM is IERC20 {\n    function rebase(uint256 ohmProfit_, uint256 epoch_) external returns (uint256);\n\n    function circulatingSupply() external view returns (uint256);\n\n    function gonsForBalance(uint256 amount) external view returns (uint256);\n\n    function balanceForGons(uint256 gons) external view returns (uint256);\n\n    function index() external view returns (uint256);\n\n    function toG(uint256 amount) external view returns (uint256);\n\n    function fromG(uint256 amount) external view returns (uint256);\n\n    function changeDebt(\n        uint256 amount,\n        address debtor,\n        bool add\n    ) external;\n\n    function debtBalances(address _address) external view returns (uint256);\n}\n"
    },
    "contracts/zaps/interfaces/IgOHM.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\ninterface IgOHM is IERC20 {\n    function mint(address _to, uint256 _amount) external;\n\n    function burn(address _from, uint256 _amount) external;\n\n    function index() external view returns (uint256);\n\n    function balanceFrom(uint256 _amount) external view returns (uint256);\n\n    function balanceTo(uint256 _amount) external view returns (uint256);\n\n    function migrate(address _staking, address _sOHM) external;\n}\n"
    },
    "contracts/zaps/libraries/ZapBaseV3.sol": {
      "content": "// ███████╗░█████╗░██████╗░██████╗░███████╗██████╗░░░░███████╗██╗\n// ╚════██║██╔══██╗██╔══██╗██╔══██╗██╔════╝██╔══██╗░░░██╔════╝██║\n// ░░███╔═╝███████║██████╔╝██████╔╝█████╗░░██████╔╝░░░█████╗░░██║\n// ██╔══╝░░██╔══██║██╔═══╝░██╔═══╝░██╔══╝░░██╔══██╗░░░██╔══╝░░██║\n// ███████╗██║░░██║██║░░░░░██║░░░░░███████╗██║░░██║██╗██║░░░░░██║\n// ╚══════╝╚═╝░░╚═╝╚═╝░░░░░╚═╝░░░░░╚══════╝╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝\n// Copyright (C) 2021 zapper\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 2 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n\n/// @author Zapper\n/// @notice This abstract contract, which is inherited by Zaps,\n/// provides utility functions for moving tokens, checking allowances\n/// and balances, performing swaps and other Zaps, and accounting\n/// for fees.\n\n// SPDX-License-Identifier: GPL-2.0\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IERC20Metadata.sol\";\nimport \"../interfaces/IWETH.sol\";\n\nimport \"./Context.sol\";\nimport \"./Address.sol\";\nimport \"./SafeERC20.sol\";\n\n// Ownable left here as not to confuse Olympus's Ownable\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\nabstract contract ZapBaseV3 is Ownable {\n    using SafeERC20 for IERC20;\n    bool public stopped;\n\n    address private constant wethTokenAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n\n    // if true, goodwill is not deducted\n    mapping(address => bool) public feeWhitelist;\n\n    uint256 public goodwill;\n    // % share of goodwill (0-100 %)\n    uint256 affiliateSplit;\n    // restrict affiliates\n    mapping(address => bool) public affiliates;\n    // affiliate => token => amount\n    mapping(address => mapping(address => uint256)) public affiliateBalance;\n    // token => amount\n    mapping(address => uint256) public totalAffiliateBalance;\n    // swapTarget => approval status\n    mapping(address => bool) public approvedTargets;\n\n    address internal constant ETHAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    modifier pausable() {\n        require(!stopped, \"Paused\");\n        _;\n    }\n\n    constructor(uint256 _goodwill, uint256 _affiliateSplit) {\n        goodwill = _goodwill;\n        affiliateSplit = _affiliateSplit;\n    }\n\n    /**\n    @dev Transfers tokens (including ETH) from msg.sender to this contract\n    @dev For use with Zap Ins (takes fee from input if > 0)\n    @param token The ERC20 token to transfer to this contract (0 address if ETH)\n    @return Quantity of tokens transferred to this contract\n     */\n    function _pullTokens(\n        address token,\n        uint256 amount,\n        address affiliate,\n        bool enableGoodwill\n    ) internal virtual returns (uint256) {\n        uint256 totalGoodwillPortion;\n\n        if (token == address(0)) {\n            require(msg.value > 0, \"No ETH sent\");\n\n            totalGoodwillPortion = _subtractGoodwill(\n                ETHAddress,\n                msg.value,\n                affiliate,\n                enableGoodwill\n            );\n\n            return msg.value - totalGoodwillPortion;\n        }\n\n        require(amount > 0, \"Invalid token amount\");\n        require(msg.value == 0, \"ETH sent with token\");\n\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n\n        totalGoodwillPortion = _subtractGoodwill(token, amount, affiliate, enableGoodwill);\n\n        return amount - totalGoodwillPortion;\n    }\n\n    /**\n    @dev Transfers tokens from msg.sender to this contract\n    @dev For use with Zap Outs (does not transfer ETH)\n    @param token The ERC20 token to transfer to this contract\n    @return Quantity of tokens transferred to this contract\n     */\n    function _pullTokens(address token, uint256 amount) internal virtual returns (uint256) {\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n\n        return amount;\n    }\n\n    /**\n    @dev Fulfills an encoded swap or Zap if the target is approved\n    @param fromToken The sell token\n    @param toToken The buy token\n    @param amount The quantity of fromToken to sell\n    @param swapTarget The execution target for the swapData\n    @param swapData The swap data encoding the swap or Zap\n    @return amountBought Quantity of tokens toToken acquired\n     */\n    function _fillQuote(\n        address fromToken,\n        address toToken,\n        uint256 amount,\n        address swapTarget,\n        bytes memory swapData\n    ) internal virtual returns (uint256 amountBought) {\n        if (fromToken == toToken) {\n            return amount;\n        }\n\n        if (fromToken == address(0) && toToken == wethTokenAddress) {\n            IWETH(wethTokenAddress).deposit{ value: amount }();\n            return amount;\n        }\n\n        if (fromToken == wethTokenAddress && toToken == address(0)) {\n            IWETH(wethTokenAddress).withdraw(amount);\n            return amount;\n        }\n\n        uint256 valueToSend;\n        if (fromToken == address(0)) {\n            valueToSend = amount;\n        } else {\n            _approveToken(fromToken, swapTarget, amount);\n        }\n\n        uint256 initialBalance = _getBalance(toToken);\n\n        require(approvedTargets[swapTarget], \"Target not Authorized\");\n        (bool success, ) = swapTarget.call{ value: valueToSend }(swapData);\n        require(success, \"Error Swapping Tokens\");\n\n        amountBought = _getBalance(toToken) - initialBalance;\n\n        require(amountBought > 0, \"Swapped To Invalid Token\");\n    }\n\n    /**\n    @notice Gets this contract's balance of a token\n    @param token The ERC20 token to check the balance of (0 address if ETH)\n    @return balance This contract's token balance\n     */\n    function _getBalance(address token) internal view returns (uint256 balance) {\n        if (token == address(0)) {\n            balance = address(this).balance;\n        } else {\n            balance = IERC20(token).balanceOf(address(this));\n        }\n    }\n\n    /**\n    @notice Approve a token for spending with infinite allowance\n    @param token The ERC20 token to approve\n    @param spender The spender of the token\n     */\n    function _approveToken(address token, address spender) internal {\n        if (token == address(0) || spender == address(0)) return;\n        IERC20 _token = IERC20(token);\n        if (_token.allowance(address(this), spender) > 0) return;\n        else {\n            _token.safeApprove(spender, type(uint256).max);\n        }\n    }\n\n    /**\n    @notice Approve a token for spending with finite allowance\n    @param token The ERC20 token to approve\n    @param spender The spender of the token\n    @param amount The allowance to grant to the spender\n     */\n    function _approveToken(\n        address token,\n        address spender,\n        uint256 amount\n    ) internal {\n        if (token == address(0) || spender == address(0)) return;\n        IERC20(token).safeApprove(spender, 0);\n        IERC20(token).safeApprove(spender, amount);\n    }\n\n    /**\n    @notice Set address to true to bypass fees when calling this contract\n    @param zapAddress The Zap caller which is allowed to bypass fees (if > 0)\n    @param status The whitelisted status (true if whitelisted)\n     */\n    function set_feeWhitelist(address zapAddress, bool status) external onlyOwner {\n        feeWhitelist[zapAddress] = status;\n    }\n\n    /** \n    @notice Sets a goodwill amount\n    @param _new_goodwill The new goodwill amount between 0-1%\n     */\n    function set_new_goodwill(uint256 _new_goodwill) public onlyOwner {\n        require(_new_goodwill >= 0 && _new_goodwill <= 100, \"GoodWill Value not allowed\");\n        goodwill = _new_goodwill;\n    }\n\n    /** \n    @notice Sets the percentage to split the goodwill by to distribute\n    * to affiliates\n    @param _new_affiliateSplit The new affiliate split between 0-1%\n     */\n    function set_new_affiliateSplit(uint256 _new_affiliateSplit) external onlyOwner {\n        require(_new_affiliateSplit <= 100, \"Affiliate Split Value not allowed\");\n        affiliateSplit = _new_affiliateSplit;\n    }\n\n    /** \n    @notice Adds or removes an affiliate\n    @param _affiliate The  affiliate's address\n    @param _status The affiliate's approval status\n     */\n    function set_affiliate(address _affiliate, bool _status) external onlyOwner {\n        affiliates[_affiliate] = _status;\n    }\n\n    /** \n    @notice Withdraws goodwill share, retaining affilliate share\n    @param tokens An array of the tokens to withdraw (0xeee address if ETH)\n     */\n    function withdrawTokens(address[] calldata tokens) external onlyOwner {\n        for (uint256 i = 0; i < tokens.length; i++) {\n            uint256 qty;\n\n            if (tokens[i] == ETHAddress) {\n                qty = address(this).balance - totalAffiliateBalance[tokens[i]];\n\n                Address.sendValue(payable(owner()), qty);\n            } else {\n                qty = IERC20(tokens[i]).balanceOf(address(this)) - totalAffiliateBalance[tokens[i]];\n                IERC20(tokens[i]).safeTransfer(owner(), qty);\n            }\n        }\n    }\n\n    /** \n    @notice Withdraws the affilliate share, retaining goodwill share\n    @param tokens An array of the tokens to withdraw (0xeee address if ETH)\n     */\n    function affilliateWithdraw(address[] calldata tokens) external {\n        uint256 tokenBal;\n        for (uint256 i = 0; i < tokens.length; i++) {\n            tokenBal = affiliateBalance[msg.sender][tokens[i]];\n            affiliateBalance[msg.sender][tokens[i]] = 0;\n            totalAffiliateBalance[tokens[i]] = totalAffiliateBalance[tokens[i]] - tokenBal;\n\n            if (tokens[i] == ETHAddress) {\n                Address.sendValue(payable(msg.sender), tokenBal);\n            } else {\n                IERC20(tokens[i]).safeTransfer(msg.sender, tokenBal);\n            }\n        }\n    }\n\n    /**\n    @dev Adds or removes an approved swapTarget\n    * swapTargets should be Zaps and must not be tokens!\n    @param targets An array of addresses of approved swapTargets\n    */\n    function setApprovedTargets(address[] calldata targets, bool[] calldata isApproved)\n        external\n        onlyOwner\n    {\n        require(targets.length == isApproved.length, \"Invalid Input length\");\n\n        for (uint256 i = 0; i < targets.length; i++) {\n            approvedTargets[targets[i]] = isApproved[i];\n        }\n    }\n\n    /** \n    @dev Subtracts the goodwill amount from the `amount` param\n    @param token The ERC20 token being sent (0 address if ETH)\n    @param amount The quantity of the token being sent\n    @param affiliate The  affiliate's address\n    @param enableGoodwill True if bypassing goodwill, false otherwise\n    @return totalGoodwillPortion The quantity of `token` that should be\n    * subtracted from `amount`\n     */\n    function _subtractGoodwill(\n        address token,\n        uint256 amount,\n        address affiliate,\n        bool enableGoodwill\n    ) internal returns (uint256 totalGoodwillPortion) {\n        bool whitelisted = feeWhitelist[msg.sender];\n        if (goodwill > 0 && enableGoodwill && !whitelisted) {\n            totalGoodwillPortion = (amount * goodwill) / 10000;\n\n            if (affiliates[affiliate]) {\n                if (token == address(0)) {\n                    token = ETHAddress;\n                }\n\n                uint256 affiliatePortion = (totalGoodwillPortion * affiliateSplit) / 100;\n                affiliateBalance[affiliate][token] += affiliatePortion;\n                totalAffiliateBalance[token] += affiliatePortion;\n            }\n        }\n    }\n\n    /**\n    @dev Toggles the contract's active state\n     */\n    function toggleContractActive() public onlyOwner {\n        stopped = !stopped;\n    }\n\n    receive() external payable {\n        require(msg.sender != tx.origin, \"Do not send ETH directly\");\n    }\n}\n"
    },
    "contracts/zaps/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: WTFPL\npragma solidity ^0.8.0;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
    },
    "contracts/zaps/interfaces/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\ninterface IERC20Metadata is IERC20 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n}"
    },
    "contracts/zaps/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity ^0.8.0;\n\ninterface IWETH {\n    function deposit() external payable;\n    function withdraw(uint256 wad) external;\n}"
    },
    "contracts/zaps/libraries/Context.sol": {
      "content": "// SPDX-License-Identifier: WTFPL\npragma solidity ^0.8.0;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}"
    },
    "contracts/zaps/libraries/Address.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance >= amount,\n            \"Address: insufficient balance\"\n        );\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(\n                target,\n                data,\n                value,\n                \"Address: low-level call with value failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(\n            address(this).balance >= value,\n            \"Address: insufficient balance for call\"\n        );\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) =\n            target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data)\n        internal\n        view\n        returns (bytes memory)\n    {\n        return\n            functionStaticCall(\n                target,\n                data,\n                \"Address: low-level static call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return\n            functionDelegateCall(\n                target,\n                data,\n                \"Address: low-level delegate call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}"
    },
    "contracts/zaps/libraries/SafeERC20.sol": {
      "content": "\n// SPDX-License-Identifier: GPL-2.0\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"./Address.sol\";\n\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transfer.selector, to, value)\n        );\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n        );\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, value)\n        );\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(\n                token.approve.selector,\n                spender,\n                newAllowance\n            )\n        );\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(\n                oldAllowance >= value,\n                \"SafeERC20: decreased allowance below zero\"\n            );\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(\n                token,\n                abi.encodeWithSelector(\n                    token.approve.selector,\n                    spender,\n                    newAllowance\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata =\n            address(token).functionCall(\n                data,\n                \"SafeERC20: low-level call failed\"\n            );\n        if (returndata.length > 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(\n                abi.decode(returndata, (bool)),\n                \"SafeERC20: ERC20 operation did not succeed\"\n            );\n        }\n    }\n}"
    },
    "contracts/zaps/libraries/ZapBaseV2_2.sol": {
      "content": "// ███████╗░█████╗░██████╗░██████╗░███████╗██████╗░░░░███████╗██╗\n// ╚════██║██╔══██╗██╔══██╗██╔══██╗██╔════╝██╔══██╗░░░██╔════╝██║\n// ░░███╔═╝███████║██████╔╝██████╔╝█████╗░░██████╔╝░░░█████╗░░██║\n// ██╔══╝░░██╔══██║██╔═══╝░██╔═══╝░██╔══╝░░██╔══██╗░░░██╔══╝░░██║\n// ███████╗██║░░██║██║░░░░░██║░░░░░███████╗██║░░██║██╗██║░░░░░██║\n// ╚══════╝╚═╝░░╚═╝╚═╝░░░░░╚═╝░░░░░╚══════╝╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝\n// Copyright (C) 2021 zapper\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 2 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n\n/// @author Zapper\n/// @notice This abstract contract, which is inherited by Zaps,\n/// provides utility functions for moving tokens, checking allowances\n/// and balances, performing swaps and other Zaps, and accounting\n/// for fees.\n\n// SPDX-License-Identifier: GPL-2.0\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IERC20Metadata.sol\";\nimport \"../interfaces/IWETH.sol\";\n\nimport \"./Context.sol\";\nimport \"./Address.sol\";\nimport \"./SafeERC20.sol\";\n\n\n// Ownable left here as not to confuse Olympus's Ownable\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\nabstract contract ZapBaseV2_2 is Ownable {\n    using SafeERC20 for IERC20;\n    bool public stopped;\n\n    address private constant wethTokenAddress =\n        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n\n    // if true, goodwill is not deducted\n    mapping(address => bool) public feeWhitelist;\n\n    uint256 public goodwill;\n    // % share of goodwill (0-100 %)\n    uint256 affiliateSplit;\n    // restrict affiliates\n    mapping(address => bool) public affiliates;\n    // affiliate => token => amount\n    mapping(address => mapping(address => uint256)) public affiliateBalance;\n    // token => amount\n    mapping(address => uint256) public totalAffiliateBalance;\n    // swapTarget => approval status\n    mapping(address => bool) public approvedTargets;\n\n    address internal constant ETHAddress =\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    address internal constant ZapperAdmin =\n        0x3CE37278de6388532C3949ce4e886F365B14fB56;\n\n    // circuit breaker modifiers\n    modifier stopInEmergency {\n        require(!stopped, \"Paused\");\n        _;\n    }\n\n    constructor(uint256 _goodwill, uint256 _affiliateSplit) {\n        goodwill = _goodwill;\n        affiliateSplit = _affiliateSplit;\n    }\n\n    /**\n    @dev Transfers tokens (including ETH) from msg.sender to this contract\n    @dev For use with Zap Ins (takes fee from input if > 0)\n    @param token The ERC20 token to transfer to this contract (0 address if ETH)\n    @return Quantity of tokens transferred to this contract\n     */\n    function _pullTokens(\n        address token,\n        uint256 amount,\n        address affiliate,\n        bool enableGoodwill\n    ) internal virtual returns (uint256) {\n        uint256 totalGoodwillPortion;\n\n        if (token == address(0)) {\n            require(msg.value > 0, \"No ETH sent\");\n\n            totalGoodwillPortion = _subtractGoodwill(\n                ETHAddress,\n                msg.value,\n                affiliate,\n                enableGoodwill\n            );\n\n            return msg.value - totalGoodwillPortion;\n        }\n\n        require(amount > 0, \"Invalid token amount\");\n        require(msg.value == 0, \"ETH sent with token\");\n\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n\n        totalGoodwillPortion = _subtractGoodwill(\n            token,\n            amount,\n            affiliate,\n            enableGoodwill\n        );\n\n        return amount - totalGoodwillPortion;\n    }\n\n    /**\n    @dev Transfers tokens from msg.sender to this contract\n    @dev For use with Zap Outs (does not transfer ETH)\n    @param token The ERC20 token to transfer to this contract\n    @return Quantity of tokens transferred to this contract\n     */\n    function _pullTokens(address token, uint256 amount)\n        internal\n        virtual\n        returns (uint256)\n    {\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n\n        return amount;\n    }\n\n    /**\n    @dev Fulfills an encoded swap or Zap if the target is approved\n    @param fromToken The sell token\n    @param toToken The buy token\n    @param amount The quantity of fromToken to sell\n    @param swapTarget The execution target for the swapData\n    @param swapData The swap data encoding the swap or Zap\n    @return amountBought Quantity of tokens toToken acquired\n     */\n    function _fillQuote(\n        address fromToken,\n        address toToken,\n        uint256 amount,\n        address swapTarget,\n        bytes memory swapData\n    ) internal virtual returns (uint256 amountBought) {\n        if (fromToken == toToken) {\n            return amount;\n        }\n\n        if (fromToken == address(0) && toToken == wethTokenAddress) {\n            IWETH(wethTokenAddress).deposit{ value: amount }();\n            return amount;\n        }\n\n        if (fromToken == wethTokenAddress && toToken == address(0)) {\n            IWETH(wethTokenAddress).withdraw(amount);\n            return amount;\n        }\n\n        uint256 valueToSend;\n        if (fromToken == address(0)) {\n            valueToSend = amount;\n        } else {\n            _approveToken(fromToken, swapTarget, amount);\n        }\n\n        uint256 initialBalance = _getBalance(toToken);\n\n        require(approvedTargets[swapTarget], \"Target not Authorized\");\n        (bool success, ) = swapTarget.call{ value: valueToSend }(swapData);\n        require(success, \"Error Swapping Tokens\");\n\n        amountBought = _getBalance(toToken) - initialBalance;\n\n        require(amountBought > 0, \"Swapped To Invalid Token\");\n    }\n\n    /**\n    @notice Gets this contract's balance of a token\n    @param token The ERC20 token to check the balance of (0 address if ETH)\n    @return balance This contract's token balance\n     */\n    function _getBalance(address token)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        if (token == address(0)) {\n            balance = address(this).balance;\n        } else {\n            balance = IERC20(token).balanceOf(address(this));\n        }\n    }\n\n    /**\n    @notice Approve a token for spending with infinite allowance\n    @param token The ERC20 token to approve\n    @param spender The spender of the token\n     */\n    function _approveToken(address token, address spender) internal {\n        IERC20 _token = IERC20(token);\n        if (_token.allowance(address(this), spender) > 0) return;\n        else {\n            _token.safeApprove(spender, type(uint256).max);\n        }\n    }\n\n    /**\n    @notice Approve a token for spending with finite allowance\n    @param token The ERC20 token to approve\n    @param spender The spender of the token\n    @param amount The allowance to grant to the spender\n     */\n    function _approveToken(\n        address token,\n        address spender,\n        uint256 amount\n    ) internal {\n        IERC20(token).safeApprove(spender, 0);\n        IERC20(token).safeApprove(spender, amount);\n    }\n\n    /**\n    @notice Set address to true to bypass fees when calling this contract\n    @param zapAddress The Zap caller which is allowed to bypass fees (if > 0)\n    @param status The whitelisted status (true if whitelisted)\n     */\n    function set_feeWhitelist(address zapAddress, bool status)\n        external\n        onlyOwner\n    {\n        feeWhitelist[zapAddress] = status;\n    }\n\n    /** \n    @notice Sets a goodwill amount\n    @param _new_goodwill The new goodwill amount between 0-1%\n     */\n    function set_new_goodwill(uint256 _new_goodwill) public onlyOwner {\n        require(\n            _new_goodwill >= 0 && _new_goodwill <= 100,\n            \"GoodWill Value not allowed\"\n        );\n        goodwill = _new_goodwill;\n    }\n\n    /** \n    @notice Sets the percentage to split the goodwill by to distribute\n    * to affiliates\n    @param _new_affiliateSplit The new affiliate split between 0-1%\n     */\n    function set_new_affiliateSplit(uint256 _new_affiliateSplit)\n        external\n        onlyOwner\n    {\n        require(\n            _new_affiliateSplit <= 100,\n            \"Affiliate Split Value not allowed\"\n        );\n        affiliateSplit = _new_affiliateSplit;\n    }\n\n    /** \n    @notice Adds or removes an affiliate\n    @param _affiliate The  affiliate's address\n    @param _status The affiliate's approval status\n     */\n    function set_affiliate(address _affiliate, bool _status)\n        external\n        onlyOwner\n    {\n        affiliates[_affiliate] = _status;\n    }\n\n    /** \n    @notice Withdraws goodwill share, retaining affilliate share\n    @param tokens An array of the tokens to withdraw (0xeee address if ETH)\n     */\n    function withdrawTokens(address[] calldata tokens) external onlyOwner {\n        for (uint256 i = 0; i < tokens.length; i++) {\n            uint256 qty;\n\n            if (tokens[i] == ETHAddress) {\n                qty = address(this).balance - totalAffiliateBalance[tokens[i]];\n\n                Address.sendValue(payable(owner()), qty);\n            } else {\n                qty =\n                    IERC20(tokens[i]).balanceOf(address(this)) -\n                    totalAffiliateBalance[tokens[i]];\n                IERC20(tokens[i]).safeTransfer(owner(), qty);\n            }\n        }\n    }\n\n    /** \n    @notice Withdraws the affilliate share, retaining goodwill share\n    @param tokens An array of the tokens to withdraw (0xeee address if ETH)\n     */\n    function affilliateWithdraw(address[] calldata tokens) external {\n        uint256 tokenBal;\n        for (uint256 i = 0; i < tokens.length; i++) {\n            tokenBal = affiliateBalance[msg.sender][tokens[i]];\n            affiliateBalance[msg.sender][tokens[i]] = 0;\n            totalAffiliateBalance[tokens[i]] =\n                totalAffiliateBalance[tokens[i]] -\n                tokenBal;\n\n            if (tokens[i] == ETHAddress) {\n                Address.sendValue(payable(msg.sender), tokenBal);\n            } else {\n                IERC20(tokens[i]).safeTransfer(msg.sender, tokenBal);\n            }\n        }\n    }\n\n    /**\n    @dev Adds or removes an approved swapTarget\n    * swapTargets should be Zaps and must not be tokens!\n    @param targets An array of addresses of approved swapTargets\n    */\n    function setApprovedTargets(\n        address[] calldata targets,\n        bool[] calldata isApproved\n    ) external onlyOwner {\n        require(targets.length == isApproved.length, \"Invalid Input length\");\n\n        for (uint256 i = 0; i < targets.length; i++) {\n            approvedTargets[targets[i]] = isApproved[i];\n        }\n    }\n\n    /** \n    @dev Subtracts the goodwill amount from the `amount` param\n    @param token The ERC20 token being sent (0 address if ETH)\n    @param amount The quantity of the token being sent\n    @param affiliate The  affiliate's address\n    @param enableGoodwill True if bypassing goodwill, false otherwise\n    @return totalGoodwillPortion The quantity of `token` that should be\n    * subtracted from `amount`\n     */\n    function _subtractGoodwill(\n        address token,\n        uint256 amount,\n        address affiliate,\n        bool enableGoodwill\n    ) internal returns (uint256 totalGoodwillPortion) {\n        bool whitelisted = feeWhitelist[msg.sender];\n        if (goodwill > 0 && enableGoodwill && !whitelisted) {\n            totalGoodwillPortion = (amount * goodwill) / 10000;\n\n            if (affiliates[affiliate]) {\n                if (token == address(0)) {\n                    token = ETHAddress;\n                }\n\n                uint256 affiliatePortion =\n                    (totalGoodwillPortion * affiliateSplit) / 100;\n                affiliateBalance[affiliate][token] += affiliatePortion;\n                totalAffiliateBalance[token] += affiliatePortion;\n            }\n        }\n    }\n\n    /**\n    @dev Toggles the contract's active state\n     */\n    function toggleContractActive() public onlyOwner {\n        stopped = !stopped;\n    }\n\n    receive() external payable {\n        require(msg.sender != tx.origin, \"Do not send ETH directly\");\n    }\n}"
    },
    "contracts/zaps/OlympusZap.sol": {
      "content": "// ███████╗░█████╗░██████╗░██████╗░███████╗██████╗░░░░███████╗██╗\n// ╚════██║██╔══██╗██╔══██╗██╔══██╗██╔════╝██╔══██╗░░░██╔════╝██║\n// ░░███╔═╝███████║██████╔╝██████╔╝█████╗░░██████╔╝░░░█████╗░░██║\n// ██╔══╝░░██╔══██║██╔═══╝░██╔═══╝░██╔══╝░░██╔══██╗░░░██╔══╝░░██║\n// ███████╗██║░░██║██║░░░░░██║░░░░░███████╗██║░░██║██╗██║░░░░░██║\n// ╚══════╝╚═╝░░╚═╝╚═╝░░░░░╚═╝░░░░░╚══════╝╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝\n// Copyright (C) 2021 zapper\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 2 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n\n/// @author Zapper and OlympusDAO\n/// @notice This contract enters/exits OlympusDAO Ω with/to any token.\n/// Bonds can also be created on behalf of msg.sender using any input token.\n\n// SPDX-License-Identifier: GPL-2.0\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IBondDepository.sol\";\nimport \"./interfaces/IStaking.sol\";\nimport \"./interfaces/IwsOHM.sol\";\n\nimport \"./libraries/ZapBaseV2_2.sol\";\n\ncontract Olympus_Zap_V2 is ZapBaseV2_2 {\n    using SafeERC20 for IERC20;\n\n    /////////////// storage ///////////////\n\n    address public olympusDAO;\n\n    address public staking = 0xFd31c7d00Ca47653c6Ce64Af53c1571f9C36566a;\n\n    address public constant OHM = 0x383518188C0C6d7730D91b2c03a03C837814a899;\n\n    address public sOHM = 0x04F2694C8fcee23e8Fd0dfEA1d4f5Bb8c352111F;\n\n    address public wsOHM = 0xCa76543Cf381ebBB277bE79574059e32108e3E65;\n\n    // IE DAI => wanted payout token (IE OHM) => bond depo\n    mapping(address => mapping(address => address)) public principalToDepository;\n\n    /////////////// Events ///////////////\n\n    // Emitted when `sender` Zaps In\n    event zapIn(address sender, address token, uint256 tokensRec, address affiliate);\n\n    // Emitted when `sender` Zaps Out\n    event zapOut(address sender, address token, uint256 tokensRec, address affiliate);\n\n    /////////////// Modifiers ///////////////\n\n    modifier onlyOlympusDAO() {\n        require(msg.sender == olympusDAO, \"Only OlympusDAO\");\n        _;\n    }\n\n    /////////////// Construction ///////////////\n\n    constructor(\n        uint256 _goodwill,\n        uint256 _affiliateSplit,\n        address _olympusDAO\n    ) ZapBaseV2_2(_goodwill, _affiliateSplit) {\n        // 0x Proxy\n        approvedTargets[0xDef1C0ded9bec7F1a1670819833240f027b25EfF] = true;\n        // Zapper Sushiswap Zap In\n        approvedTargets[0x5abfbE56553a5d794330EACCF556Ca1d2a55647C] = true;\n        // Zapper Uniswap V2 Zap In\n        approvedTargets[0x6D9893fa101CD2b1F8D1A12DE3189ff7b80FdC10] = true;\n\n        olympusDAO = _olympusDAO;\n\n        transferOwnership(ZapperAdmin);\n    }\n\n    /**\n     * @notice This function deposits assets into OlympusDAO with ETH or ERC20 tokens\n     * @param fromToken The token used for entry (address(0) if ether)\n     * @param amountIn The amount of fromToken to invest\n     * @param toToken The token fromToken is getting converted to.\n     * @param minToToken The minimum acceptable quantity sOHM\n     * or wsOHM or principal tokens to receive. Reverts otherwise\n     * @param swapTarget Excecution target for the swap or zap\n     * @param swapData DEX or Zap data. Must swap to ibToken underlying address\n     * @param affiliate Affiliate address\n     * @param maxBondPrice Max price for a bond denominated in toToken/principal. Ignored if not bonding.\n     * @param bond if toToken is being used to purchase a bond.\n     * @return OHMRec quantity of sOHM or wsOHM  received (depending on toToken)\n     * or the quantity OHM vesting (if bond is true)\n     */\n    function ZapIn(\n        address fromToken,\n        uint256 amountIn,\n        address toToken,\n        uint256 minToToken,\n        address swapTarget,\n        bytes calldata swapData,\n        address affiliate,\n        address bondPayoutToken, // ignored if not bonding\n        uint256 maxBondPrice, // ignored if not bonding\n        bool bond\n    ) external payable stopInEmergency returns (uint256 OHMRec) {\n        if (bond) {\n            // pull users fromToken\n            uint256 toInvest = _pullTokens(fromToken, amountIn, affiliate, true);\n\n            // swap fromToken -> toToken\n            uint256 tokensBought = _fillQuote(fromToken, toToken, toInvest, swapTarget, swapData);\n            require(tokensBought >= minToToken, \"High Slippage\");\n\n            // get depo address\n            address depo = principalToDepository[toToken][bondPayoutToken];\n            require(depo != address(0), \"Bond depo doesn't exist\");\n\n            // deposit bond on behalf of user, and return OHMRec\n            OHMRec = IBondDepository(depo).deposit(tokensBought, maxBondPrice, msg.sender);\n\n            // emit zapIn\n            emit zapIn(msg.sender, toToken, OHMRec, affiliate);\n        } else {\n            require(toToken == sOHM || toToken == wsOHM, \"toToken must be sOHM or wsOHM\");\n\n            uint256 toInvest = _pullTokens(fromToken, amountIn, affiliate, true);\n\n            uint256 tokensBought = _fillQuote(fromToken, OHM, toInvest, swapTarget, swapData);\n\n            OHMRec = _enterOlympus(tokensBought, toToken);\n            require(OHMRec > minToToken, \"High Slippage\");\n\n            emit zapIn(msg.sender, sOHM, OHMRec, affiliate);\n        }\n    }\n\n    /**\n     * @notice This function withdraws assets from OlympusDAO, receiving tokens or ETH\n     * @param fromToken The ibToken being withdrawn\n     * @param amountIn The quantity of fromToken to withdraw\n     * @param toToken Address of the token to receive (0 address if ETH)\n     * @param minToTokens The minimum acceptable quantity of tokens to receive. Reverts otherwise\n     * @param swapTarget Excecution target for the swap or zap\n     * @param swapData DEX or Zap data\n     * @param affiliate Affiliate address\n     * @return tokensRec Quantity of aTokens received\n     */\n    function ZapOut(\n        address fromToken,\n        uint256 amountIn,\n        address toToken,\n        uint256 minToTokens,\n        address swapTarget,\n        bytes calldata swapData,\n        address affiliate\n    ) external stopInEmergency returns (uint256 tokensRec) {\n        require(fromToken == sOHM || fromToken == wsOHM, \"fromToken must be sOHM or wsOHM\");\n\n        amountIn = _pullTokens(fromToken, amountIn);\n\n        uint256 OHMRec = _exitOlympus(fromToken, amountIn);\n\n        tokensRec = _fillQuote(OHM, toToken, OHMRec, swapTarget, swapData);\n        require(tokensRec >= minToTokens, \"High Slippage\");\n\n        uint256 totalGoodwillPortion;\n        if (toToken == address(0)) {\n            totalGoodwillPortion = _subtractGoodwill(ETHAddress, tokensRec, affiliate, true);\n\n            payable(msg.sender).transfer(tokensRec - totalGoodwillPortion);\n        } else {\n            totalGoodwillPortion = _subtractGoodwill(toToken, tokensRec, affiliate, true);\n\n            IERC20(toToken).safeTransfer(msg.sender, tokensRec - totalGoodwillPortion);\n        }\n        tokensRec = tokensRec - totalGoodwillPortion;\n\n        emit zapOut(msg.sender, toToken, tokensRec, affiliate);\n    }\n\n    function _enterOlympus(uint256 amount, address toToken) internal returns (uint256) {\n        _approveToken(OHM, staking, amount);\n\n        if (toToken == wsOHM) {\n            IStaking(staking).stake(amount, address(this));\n            IStaking(staking).claim(address(this));\n\n            _approveToken(sOHM, wsOHM, amount);\n\n            uint256 beforeBalance = _getBalance(wsOHM);\n\n            IwsOHM(wsOHM).wrap(amount);\n\n            uint256 wsOHMRec = _getBalance(wsOHM) - beforeBalance;\n\n            IERC20(wsOHM).safeTransfer(msg.sender, wsOHMRec);\n\n            return wsOHMRec;\n        }\n        IStaking(staking).stake(amount, msg.sender);\n        IStaking(staking).claim(msg.sender);\n\n        return amount;\n    }\n\n    function _exitOlympus(address fromToken, uint256 amount) internal returns (uint256) {\n        if (fromToken == wsOHM) {\n            uint256 sOHMRec = IwsOHM(wsOHM).unwrap(amount);\n\n            _approveToken(sOHM, address(staking), sOHMRec);\n\n            IStaking(staking).unstake(sOHMRec, true);\n\n            return sOHMRec;\n        }\n        _approveToken(sOHM, address(staking), amount);\n\n        IStaking(staking).unstake(amount, true);\n\n        return amount;\n    }\n\n    function removeLiquidityReturn(address fromToken, uint256 fromAmount)\n        external\n        view\n        returns (uint256 ohmAmount)\n    {\n        if (fromToken == sOHM) {\n            return fromAmount;\n        } else if (fromToken == wsOHM) {\n            return IwsOHM(wsOHM).wOHMTosOHM(fromAmount);\n        }\n    }\n\n    ///////////// olympus only /////////////\n\n    function update_OlympusDAO(address _olympusDAO) external onlyOlympusDAO {\n        olympusDAO = _olympusDAO;\n    }\n\n    function update_Staking(address _staking) external onlyOlympusDAO {\n        staking = _staking;\n    }\n\n    function update_sOHM(address _sOHM) external onlyOlympusDAO {\n        sOHM = _sOHM;\n    }\n\n    function update_wsOHM(address _wsOHM) external onlyOlympusDAO {\n        wsOHM = _wsOHM;\n    }\n\n    function update_BondDepos(\n        address[] calldata principals,\n        address[] calldata payoutTokens,\n        address[] calldata depos\n    ) external onlyOlympusDAO {\n        require(\n            principals.length == depos.length && depos.length == payoutTokens.length,\n            \"array param lengths must match\"\n        );\n        // update depos for each principal\n        for (uint256 i; i < principals.length; i++) {\n            principalToDepository[principals[i]][payoutTokens[i]] = depos[i];\n\n            // max approve depo to save on gas\n            _approveToken(principals[i], depos[i]);\n        }\n    }\n\n    function bondPrice(address principal, address payoutToken) external view returns (uint256) {\n        return IBondDepository(principalToDepository[principal][payoutToken]).bondPrice();\n    }\n}\n"
    },
    "contracts/zaps/interfaces/IBondDepository.sol": {
      "content": "// SPDX-License-Identifier: WTFPL\npragma solidity ^0.8.0;\n\ninterface IBondDepository {\n    function deposit(\n        uint256 _amount,\n        uint256 _maxPrice,\n        address _depositor\n    ) external returns (uint256);\n\n    function payoutFor(uint256 _value) external view returns (uint256);\n\n    function bondPrice() external view returns (uint256 price_);\n\n    function bondInfo(address _depositor)\n        external\n        view\n        returns (\n            uint256 payout,\n            uint256 vesting,\n            uint256 lastBlock,\n            uint256 pricePaid\n        );\n}\n"
    },
    "contracts/zaps/interfaces/IStaking.sol": {
      "content": "// SPDX-License-Identifier: WTFPL\npragma solidity ^0.8.0;\n\ninterface IStaking {\n    function stake(uint256 _amount, address _recipient) external returns (bool);\n    function unstake(uint256 _amount, bool _trigger) external;\n    function claim(address _recipient) external;\n}"
    },
    "contracts/zaps/interfaces/IwsOHM.sol": {
      "content": "// SPDX-License-Identifier: WTFPL\npragma solidity ^0.8.0;\n\ninterface IwsOHM {\n    function unwrap(uint256 _amount) external returns (uint256);\n    function wrap(uint256 _amount) external returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function balanceOf(address account) external view returns (uint256);\n    function wOHMTosOHM(uint256 _amount) external view returns (uint256);\n}"
    },
    "contracts/zaps/interfaces/IOlympusZap.sol": {
      "content": "// SPDX-License-Identifier: WTFPL\npragma solidity ^0.8.0;\n\nimport \"./IStaking.sol\";\n\ninterface IOlympusZap {\n    function update_Staking(IStaking _staking) external;\n\n    function update_sOHM(address _sOHM) external;\n\n    function update_wsOHM(address _wsOHM) external;\n\n    function update_gOHM(address _gOHM) external;\n\n    function update_BondDepository(address principal, address depository) external;\n}\n"
    },
    "contracts/zaps/OlympusProZap.sol": {
      "content": "// ███████╗░█████╗░██████╗░██████╗░███████╗██████╗░░░░███████╗██╗\n// ╚════██║██╔══██╗██╔══██╗██╔══██╗██╔════╝██╔══██╗░░░██╔════╝██║\n// ░░███╔═╝███████║██████╔╝██████╔╝█████╗░░██████╔╝░░░█████╗░░██║\n// ██╔══╝░░██╔══██║██╔═══╝░██╔═══╝░██╔══╝░░██╔══██╗░░░██╔══╝░░██║\n// ███████╗██║░░██║██║░░░░░██║░░░░░███████╗██║░░██║██╗██║░░░░░██║\n// ╚══════╝╚═╝░░╚═╝╚═╝░░░░░╚═╝░░░░░╚══════╝╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝\n// Copyright (C) 2021 zapper\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 2 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n\n/// @author Zapper and OlympusDAO\n/// @notice This contract enters Olympus Pro bonds\n\n// SPDX-License-Identifier: GPL-2.0\npragma solidity ^0.8.0;\n\nimport \"./interfaces/ICustomBondDepo.sol\";\n\nimport \"./libraries/ZapBaseV2_2.sol\";\n\ncontract OlympusPro_Zap_V1 is ZapBaseV2_2 {\n    using SafeERC20 for IERC20;\n\n    /////////////// Events ///////////////\n\n    // Emitted when `sender` Zaps In\n    event zapIn(address sender, address token, uint256 tokensRec, address affiliate);\n\n    // Emitted when `sender` Zaps Out\n    event zapOut(address sender, address token, uint256 tokensRec, address affiliate);\n\n    /////////////// State ///////////////\n\n    address public olympusDAO;\n\n    // IE DAI => wanted payout token (IE OHM) => bond depo\n    mapping(address => mapping(address => address)) public principalToDepository;\n\n    // If a token can be paid out by Olympus Pro\n    mapping(address => bool) public isOlympusProToken;\n\n    /////////////// Modifiers ///////////////\n\n    modifier onlyOlympusDAO() {\n        require(msg.sender == olympusDAO, \"Only OlympusDAO\");\n        _;\n    }\n\n    /////////////// Construction ///////////////\n\n    constructor(\n        uint256 _goodwill,\n        uint256 _affiliateSplit,\n        address _olympusDAO\n    ) ZapBaseV2_2(_goodwill, _affiliateSplit) {\n        // 0x Proxy\n        approvedTargets[0xDef1C0ded9bec7F1a1670819833240f027b25EfF] = true;\n        // Zapper Sushiswap Zap In\n        approvedTargets[0x5abfbE56553a5d794330EACCF556Ca1d2a55647C] = true;\n        // Zapper Uniswap V2 Zap In\n        approvedTargets[0x6D9893fa101CD2b1F8D1A12DE3189ff7b80FdC10] = true;\n\n        olympusDAO = _olympusDAO;\n\n        transferOwnership(ZapperAdmin);\n    }\n\n    /**\n     * @notice This function deposits assets into OlympusDAO with ETH or ERC20 tokens\n     * @param fromToken The token used for entry (address(0) if ether)\n     * @param amountIn The amount of fromToken to invest\n     * @param toToken The token fromToken is getting converted to.\n     * @param minToToken The minimum acceptable quantity sOHM or wsOHM or principal tokens to receive. Reverts otherwise\n     * @param swapTarget Excecution target for the swap or zap\n     * @param swapData DEX or Zap data. Must swap to ibToken underlying address\n     * @param affiliate Affiliate address\n     * @param maxBondPrice Max price for a bond denominated in toToken/principal. Ignored if not bonding.\n     * @return bondTokensRec quantity of sOHM or wsOHM  received (depending on toToken) or the quantity OHM vesting (if bond is true)\n     */\n    function ZapIn(\n        address fromToken,\n        uint256 amountIn,\n        address toToken,\n        uint256 minToToken,\n        address swapTarget,\n        bytes calldata swapData,\n        address affiliate,\n        address bondPayoutToken,\n        uint256 maxBondPrice\n    ) external payable stopInEmergency returns (uint256 bondTokensRec) {\n        // make sure payout token is OP bondable token\n        require(isOlympusProToken[bondPayoutToken], \"fromToken must be bondable using OP\");\n\n        // pull users fromToken\n        uint256 toInvest = _pullTokens(fromToken, amountIn, affiliate, true);\n\n        // swap fromToken -> toToken\n        uint256 tokensBought = _fillQuote(fromToken, toToken, toInvest, swapTarget, swapData);\n        require(tokensBought >= minToToken, \"High Slippage\");\n\n        // get depo address\n        address depo = principalToDepository[toToken][bondPayoutToken];\n        require(depo != address(0), \"Bond depo doesn't exist\");\n\n        // deposit bond on behalf of user, and return bondTokensRec\n        bondTokensRec = ICustomBondDepo(depo).deposit(tokensBought, maxBondPrice, msg.sender);\n\n        // emit zapIn\n        emit zapIn(msg.sender, toToken, bondTokensRec, affiliate);\n    }\n\n    ///////////// olympus only /////////////\n\n    function update_OlympusDAO(address _olympusDAO) external onlyOlympusDAO {\n        olympusDAO = _olympusDAO;\n    }\n\n    string private ARRAY_LENGTH_ERROR = \"array param lengths must match\"; // save gas\n\n    function update_isOlympusProToken(address[] memory _tokens, bool[] memory _isToken)\n        external\n        onlyOlympusDAO\n    {\n        require(_tokens.length == _isToken.length, ARRAY_LENGTH_ERROR);\n        for (uint256 i; i < _tokens.length; i++) {\n            isOlympusProToken[_tokens[i]] = _isToken[i];\n        }\n    }\n\n    function update_BondDepos(\n        address[] calldata principals,\n        address[] calldata payoutTokens,\n        address[] calldata depos\n    ) external onlyOlympusDAO {\n        require(\n            principals.length == depos.length && depos.length == payoutTokens.length,\n            ARRAY_LENGTH_ERROR\n        );\n        // update depos for each principal\n        for (uint256 i; i < principals.length; i++) {\n            require(isOlympusProToken[payoutTokens[i]], \"payoutTokens must be on OP\");\n\n            principalToDepository[principals[i]][payoutTokens[i]] = depos[i];\n\n            // max approve depo to save on gas\n            _approveToken(principals[i], depos[i]);\n        }\n    }\n\n    function bondPrice(address principal, address payoutToken) external view returns (uint256) {\n        return ICustomBondDepo(principalToDepository[principal][payoutToken]).bondPrice();\n    }\n\n    function payoutFor(\n        address principal,\n        address payoutToken,\n        uint256 value\n    ) external view returns (uint256) {\n        return ICustomBondDepo(principalToDepository[principal][payoutToken]).payoutFor(value);\n    }\n}\n"
    },
    "contracts/zaps/interfaces/ICustomBondDepo.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0\npragma solidity ^0.8.0;\n\ninterface ICustomBondDepo {\n    function deposit(\n        uint256 _amount,\n        uint256 _maxPrice,\n        address _depositor\n    ) external returns (uint256);\n\n    function bondPrice() external view returns (uint256);\n\n    function payoutFor(uint256 _value) external view returns (uint256);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}